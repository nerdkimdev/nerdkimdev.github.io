---
layout: post
title:  "객체지향이란 무엇인가"
date:   2019-01-08 09:00:00 +0900
categories: etc
comments: true
---

## 들어가는 글
나는 웹개발 백엔드 쪽을 담당하고 있는데 작년 2018년 중반쯤에 내가 맡은 프로젝트의 요구사항이 상당히 자주 바뀌어서 고생을 했던적이 있다.

그 프로젝트 이후 요구사항이 자주 바뀌어도 빠르게 대처할 수 있는 방법이 필요했고

객체지향의 개념, 객체지향 디자인의 5대 원칙, 디자인 패턴등의 존재를 알게 되어 디자인 패턴을 공부하기 전 객체지향의 개념과 객체지향 5대원칙을 공부했다.

객체지향의 개념과 객체지향 디자인의 5대 원칙을 공부한 후엔 객체지향의 강력함을 몸소 깨달았다.

그도 그럴것이 이전엔 요구사항이 바뀌면 프로젝트 이곳저곳을 돌아다니며 내 코드를 수정해야 했었는데  
단순히 SRP(단일 책임 원칙)와 OCP(개방-폐쇄 원칙)를 지키는 것만으로 작업시간이 대폭 줄어든 것을 몸소 체감했으니 말이다!

이번 글은 자바를 다시 공부하는 프론트엔드 담당 동기에게 객체지향의 개념을 알려주기위해 그리고 배웠던걸 복습하는 차원에서 문서로써 정리하려고 한다.

이 글은 객체지향의 사실과 오해라는 책의 내용을 인용했습니다.

[위키북스 객체지향의 사실과 오해](http://wikibook.co.kr/object-orientation/)
* * *

## 객체지향 프로그래밍의 이해

### 객체지향 프로그래밍이란?

**객체 지향 프로그래밍(Object-Oriented Programming, OOP)은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받으며 협력하고, 데이터를 처리할 수 있다.**

혹은

**객체지향이란 실세계를 직접적이고 직관적으로 모델링할 수 있는 패러다임**

필자는 객체지향을 처음 공부할 때 후자의 설명을 먼저 보았는데 객체지향이 무엇인지 모르는 사람의 입장에서 후자의 설명은 뭔가 뜬구름 잡는 느낌이고 객체지향이 도대체 무엇인지 잘 이해가 되지 않고 왜 저런 식으로 설명하는지 이해가 되지 않는다.

그 이유는 실세계의 모방이라는 개념은 실용적인 관점에서 객체지향 분석, 설계를 설명하기에는 적합하지 않지만, 객체지향의 철학적인개념을 설명하는데는 아주 적합하기 때문이다.

* 객체를 스스로 생각하고 스스로 결정하는 현실 세계의 생명체에 비유하는 것은 소프트웨어 객체의 상태와 행위를 "캡슐화(encapsulation)"하는 객체의 "자율성(autonomous)"을 설명하는 데 효과적이다.

* 현실 세계의 사람들이 암묵적인 약속과 명시적인 계약을 기반으로 협력하며 목표를 달성해 나가는 과정은 소프트웨어 객체들이 서로 "메시지(message)"를 주고받으며 공동의 목표를 달성하기 위해 "협력(collaboration)"하는 객체들의 관계를 설명하는 데 적합하다.

* 실세계의 사물을 기반으로 소프트웨어 객체를 식별하고 구현까지 이어간다는 개념은 객체지향 설셰의 핵심 사상인 "연결완전성(seamlessness)"을 설명하는 데 적합한 틀을 제공한다.

실세계의 모방이라는 객체지향의 개념은 프로그램을 설계하고 구현하는 실무적인 관점에서는 부적합하지만 객체지향의 기본 사상을 이해하는데 매우 효과적이다.

그러므로 다음 문단에서부터 실세계로 비유하여 객체지향의 다양한 개념을 설명해보려고 한다 실용성 측면에서는 의심스럽더라도 객체지향을 이해하는 데는 도움될 것이다.


### 협력하는 사람들

나는 부족한 카페인을 채우기 위해 카페에서 아침부터 아메리카노를 주문하려 하는 개발자다.

언제나 그렇듯 캐셔에게 아메리카노를 주문하고 결제한 후 영수증과 진동벨을 받고 주문대를 빠져나왔다.
이 시간에는 워낙 카페를 방문하는 사람들이 많아 커피가 준비될 때까지 조금 기다려야 한다.

지루한 시간을 때울 만한 일이 없어 주위를 두리번거리다 주문을 받는 캐셔의 모습이 눈에 들어왔다.

캐셔는 유쾌한 미소를 띠며 주문을 받고 있었다. 내가 서있는 자리에서는 손님과 주고받는 대화가 잘 들리지는 않았지만 음료의 종류와 사이즈를 물어보는 일상적인 질문과 답변을 주고받는 듯했다.

손님의 주문을 받은 캐셔는 미리 준비된 컵의 옆면에 음료의 종류를 적은 후 카운터 옆에 있는 테이블에 놓았다.

캐셔가 컵을 놓은 테이블 위에는 지금까지 주문된 컵이 바리스타를 향해 일렬로 늘어서 있었다.

바리스타는 바쁜 손놀림으로 자신의 차례를 기다리고 있는 컵 하나를 들어 옆면에 적힌 주문 내역을 살펴봤다.
주문내역을 기억한 바리스타는 커피 머신을 향해 돌아서서 주문된 커피를 만들었다.

바리스타는 커피가 채워진 컵을 주문대 우측에 있는 테이블에 올려 놓았다.
캐셔는 진동벨을 울려 커피를 애타게 기다리고 있을 손님에게 준비가 끝났음을 알렸다.

어디선가 바쁜 발걸음이 들려오더니 한 손님이 진동벨을 캐셔에게 반환하고 테이블 위에 놓인 컵을 채갔다.

* * *

아침 시간의 카페에는 항상 부족한 카페인을 채우려는 손님들과 손님들이 마실 커피를 제공하기 위해 바삐 움직이는 캐셔와 바리스타의 열정으로 가득 찬다.

**손님은 커피를주문하고, 캐셔는 주문을 받고, 바리스타는 커피를 제조한다. 바리스타의 제조가 끝난 커피는 다시 캐셔에게 전달되고 캐셔는 퀭한 눈으로 커피를 기다리고 있는 손님에게 커피가 준비됐다는 소식을 알린다.**

모든 음료 주문은 손님이 커피를 주문하고, 캐셔가 주문을 받고, 바리스타가 커피를 제조하는 과정을 거친 후에야 완료된다.

커피를 주문하고 제조하는 과정은 역할, 책임, 협력이라는 사람의 일상 속에 항상 스며들어 있는 세 가지 개념이 한데 어울려 조화를 이루며 만들어 낸 것이다.

* * *

커피를 주문하고 제조하는 과정이 성사되는 것이 가능한 이유는 과정 속에 손님, 캐셔, 바리스타 사이의 암묵적인 **협력** 관계가 존재하기 때문이다.

커피와 함께할 수 있는 아침 시간의 여유를 누릴 수 있는 이유는 커피를 주문하는 손님, 주문을 받는 캐셔, 커피를 제조하는 바리스타라는 **역할**이 존재하기 때문이다.

손님, 캐셔, 바리스타는 주문한 커피를 손님에게 제공하기 위해 협력하는 과정에서 자신이 맡은 바 **책임**을 다한다.

* 손님은 카페인을 채우기 위해 커피를 주문할 책임을 수행한다.
* 캐셔는 손님의 주문을 받는 책임을 수행한다.
* 바리스타는 주문된 커피를 제조하는 책임을 수행한다.

커피 주문이라는 협력에 참여하는 모든 사람들은 커피가 정확하게 주문되고 주문된 커피가 손님에게 정확하게 전달될 수 있도록 맡은 바 역할과 책임을 다하고 있는 것이다.

역할, 책임, 협력은 우리가 무언가를 완수하기 위해 다른 사람과 접촉하는 모든 곳에 존재한다. 덜컹거리는 차를 정비하기 위해 들른 정비소에서도, 주린 배를 채우기 위해 들어간 식당에서도, 소프트웨어 개발 프로젝트가 진행되는 곳에서도, 사람이 사는 곳이라면 어디서나 역할, 책임, 협력이 존재한다.

마지막으로 좋은 소식을 전할 수 있어 기쁘다.
그건 여러분들이 객체지향에서 가장 중요한 개념 **역할, 책임, 협력**을 이해했다는 점이다.


### 요청과 응답으로 구성된 협력

일상에서 발생하는 대부분의 문제는 개인 혼자만의 힘으로 해결하기 버거울 정도로 복잡하기 때문에 사람들은 혼자서 문제를 해결하기 보다는 다른 사람들의 도움을 받아 문제를 해결하는 것을 선호한다.
사람들은 스스로 해결하지 못하는 문제와 마주치면 문제 해결에 필요한 지식을 알고 있거나 서비스를 제공해줄 수 있느 사람에게 요청(request)한다.

일반적으로 하나의 문제를 해결하기 위해 다수의 사람 혹은 역할이 필요하기 때문에 한사람에 대한 요청이 또 다른 사람에 대한 요청을 유발하는 것이 일반적이다. 따라서 요청은 연쇄적으로 발생한다.

* 커피 주문이라는 협력은 손님이 캐셔에게 원하는 커피를 주문하면서 시작된다. 손님이 캐셔에게 주문하는 것은 커피를 제공해 줄 것을 캐셔에게 요청하는 것이다.
* 주문을 받은 캐셔는 주문 내역이 기록된 컵을 전달함으로써 바리스타에게 주문된 커피를 제조해줄 것을 요청한다.

**손님** --(커피를 주문한다)→ **캐셔** --(커피를 제조하라)→ **바리스타**

요청을 받은 사람은 주어진 책임을 다하면서 필요한 지식이나 서비스를 제공한다. 즉 다른사람의 요청에 응답(response)한다. 요청이 연이어 발생하기 때문에 응답 역시 요청의 방향과 반대 방향으로 연쇄적으로 전달한다.

**손님** ←(커피 완성)-- **캐셔** ←(커피를 완성)-- **바리스타**

요청과 응답을 통해 다른 사람과 **협력**할 수 있는 능력은 인간으로 하여금 거대하고 복잡한 문제를 해결할 수 있는 공동체를 형성할 수 있게 만든다.

**협력의 성공은 특정한 역할을 맡은 각 개인이 얼마나 요청을 성실히 이행하는가에 달려 있다.**


### 역할과 책임

사람들은 다른 사람과 협력하는 과정 속에서 특정한 역할을 부여받는다. 카페에서 손님이 주문한 커피를 제조하기 위해 캐셔와 바리스타가 협력하는 과정 속에는 '손님', '캐셔', '바리스타'라는 역할이 존재한다.

역할은 어떤 협력에 참여하는 특정한 사람이 협력 안에서 차지하는 책임이나 임무를 의미한다.

어떤 사람이손님이라는 역할을 맡았다면 그 사람은 커피를 주문하는 임무를 맡게 된다. 캐셔라는 역할을 맡은 사람은 손님으로부터 주문을 받아야만 한다. 바리스타 역할을 맡은 사람은 주문된 커피를 제조해야 할 책임이 있다.

잠깐, 바로 위의 책임이라는 단어를 다시보자. 역할이라는 단어는 의미적으로 책임이라는 개념을 내포한다. 선생님이라는 역할은 학생을 가르칠 책임이 있음을 암시한다. 범죄자를 검거할 책임을 거부하는 사람에게 경찰관이라는 역할을 부여할 사람은 아무도 없을 것이다. 우리가 프로그래머라는 역할을 맡을 수 있는 이유도 훌륭한 프로그램을 개발할 책임을 기꺼이 받아들이기 때문이다.

특정한 역할은 특정한 책임을 암시한다. 협력에 참여하며 특정한 역할을 수행하는 사람들은 역할에 적합한 책임을 수행하게 된다. 손님에게는 커피를 주문할 책임이 있다. 캐셔에게는 주문 내용을 바리스타에게 전달할 책임과 커피가 준비됐다는 사실을 손님에게 알릴 책임이 있다. 바리스타는 커피를 제조할 책임이 있다. **역할과 책임은 협력이 원활하게 진행되는 데 필요한 핵심적인 구성 요소다.**

사람들이 협력을 위해 특정한 역할을 맡고 역할에 적합한 책임을 수행한다는 사실은 몇가지 중요한 개념을 제시한다.

* 여러 사람이 동일한 역할을 수행할 수 있다.

손님 입장에서 자신이 주문한 커피를 마실 수 만 있다면 어떤 캐셔가 주문을 받는지는 중요하지 않다. 캐셔의 입장에서 자신이 전달한 주문 내역에 맞게 커피를 제조할 수만 있다면 어떤 바리스타가 커피를 제조하더라도 크게 상관하지 않는다.

* 역할은 대체 가능성을 의미한다

손님 입장에서 캐셔는 **대체 가능(substitutable)하다.** 좀 더 정확하게 말하면 두 명이 동일한 역할을 수행할 수 있다면 요청자 입장에서 둘 중 어던 사람이 역할을 수행하더라도 문제가 되지 않는다.

* 책임을 수행하는 방법은 자율적으로 선택할 수 있다.

요청을 받은 사람들은 요청을 처리하는 방법을 자유롭게 선택할 수 있다. 커피 제조를 요청받은 바리스타는 자신만의 독특한 방법으로 커피를 제조할 수 있다. 중요한 것은 커피를 제조하라는 동일한 요청을 받더라도 바리스타의 역할을 수행하는 사람들마다 서로 다른 방식으로 요청을 처리할 수 있다는 것이다. 이처럼 동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 **다형성(polymorphism)**이라고한다.

* 한 사람이 동시에 여러 역할을 수행할 수 있다

캐셔와 바리스타라는 개별적인 역할을 이용해 협력관계를 묘사했지만 한 사람이 캐셔와 바리스타의 역할을 동시에 수행하는 것도 가능하다. 따라서 한 사람이 동시에 둘 이상의 역할을 수행하는 것도 가능하다.
현실 속에 살아가는 우리 모두 둘 이상의 역할을 수행한다. 회사에 출근하면 사원이라는 역할을 수행하며, 집에 돌아와서는 아이의 부모 혹은 자식이라는 역할을 수행한다.

###기능을 구현하기 위해 협력하는 객체들

지금까지 설명한 실세계의 커피를 주문하는 과정은 객체지향의 핵심적이고 중요한 개념을 거의 대부분 포함하고 있다. 앞에서 **사람**이라는 단어를 **객체**로, **요청**을 **메시지**로, **요청을 처리하는 방법**을 메서드로 바꾸면 대부분의 설명을 객체지향이라는 문맥으로 옮겨올 수 있다. 이것이 바로 많은 사람들이 객체지향을 설명하기 위해 실세계의 모방이라는 은유를 차용하는 이유다.

### 역할과 책임을 수행하며 협력하는 객체들

사람들은 커피 주문과 같은 특정한 목표를 이루기 위해 서로 협력한다. 협력의 핵심은 특정한 책임을 수행하는 역할들 간의 연쇄적인 요청과 응답을 통해 목표를 달성한다는 것이다. 일상생활에서 목표는 사람들의 협력을 통해 달성되며, 목표는 더 작은 책임으로 분할되고 책임을 수행할 수 있는 적절한 역할을 가진 사람에 의해 수행된다. 협력에 참여하는 각 개인은 책임을 수행하기 위해 다른 사람에게 도움을 요청하기도 하며, 이를 통해 연쇄적인 요청과 응답으로 구성되는 협력 관계가 완성된다.

사용자가 최종적으로 인식하게 되는 시스템의기능(특정한 목표)은 객체(사람)들이 성실히 협력해서 일궈낸 결실이다. 사람들의 협력이 객체들의 협력과 다른 점이라면 사람들의 경우 공통의 목표를 달성하기 위해 협력하는 데 비해 객체들의 경우에는 애플리케이션의 기능을 구현하기 위해 협력한다는 점이다.

애플리케이션의 기능은 더 작은 책임으로 분할되고 책임은 적절한 역할을 수행할 수 있는 객체에 의해 수행된다. 객체는 자신의 책임을 수행하는 도중에 다른 객체에게 도움을 요청하기도 한다. 결론적으로 시스템은 역할과 책임을 수행하는 객체로 분할되고 시스템의 기능은 객체 간의 연쇄적인 요청과 응답의 흐름으로 구성된 협력으로 구현된다.

객체지향 설계는 적절한 객체에게 적절한 책임을 할당하는 것에서 시작된다. 책임은 객체지향 설계의 품질을 결정하는 가장 중요한 요소다. 책임이 불분명한 객체는 애플리케이션의 유연성을 해친다. 얼마나 적절한 책임을 선택하느냐가 애플리케이션의 유연성을 결정한다.

객체의 역할은 사람의 역할과 유사하게 다음과 같은 특징을 지닌다.

* 여러 객체가 동일한 역할을 수행할 수 있다.
* 역할은 대체 가능성을 의미한다.
* 각 객체는 책임을 수행하는 방법을 자율적으로 선택할 수 있다.
* 하나의 객체가 동시에 여러 역할을 수행할 수 있다.

객체지향 프로그래밍에 경험이 많은 사람들조차 역할의 중요성을 간과하곤 한다. 역할은 유연하고 재사용 가능한 협력 관계를 구축하는 데 중요한 설계 요소다. 대체 가능한 역할과 책임은 객체지향 패러다임의 중요한 기반을 제공하는 **다형성**과도 깊이 연관돼 있다.

### 협력속에 사는 객체

객체지향 애플리케이션의 윤곽을 결정하는 것은 역할, 책임, 협력이지만 실제로 협력에 참여하는 주체는 객체다. 만약 실행 중인 애플리케이션의 내부를 눈으로 직접 볼 수 있다면 그 안에는 쉴 새 없이 메시지를 주고받으며 협력하는 객체가 존재한다는 것을 확인할 수 있을 것이다. 인간의 세계에서 사람이 없으면 역할, 책임, 협력이 아무런 의미가 없는 것처럼 객체가 존재하지 않는 객체지향 세계 역시 아무런 의미가 없다. 어쨌든 객체지향을 객체지향이라고 부르는 이유는 패러다임의 중심에 객체가 있기 때문이다.

애플리케이션의 기능은 아주 작은 기능조차 객체 혼자 감당하기에는 버거울 정도로 복잡하고 거대하기 때문에 일반적으로 객체는 다른 객체와의 협력을 통해 기능을 구현하게 된다. 객체지향 애플리케이션의 유연성을 결정하는 것이 협력이라면 협력이 얼마나 조화를 이루는지를 결정하는 것은 객체다. 결국 협력의 품질을 결정하는 것은 객체의 품질이다.

협력 공동체의 일원으로서 객체는 다음과 같은 두 가지 덕목을 갖춰야 하며, 두 덕목 사이에서 균형을 유지해야 한다.

* 객체는 충분히 "협력적"이어야 한다.

객체는 다른 객체의 요청에 충실히 귀 기울이고 다른 객체에게 적극적으로 도움을 요청할 정도로 열린 마음을 지녀야 한다. 외부의 도움을 무시한 채 모든 것을 스스로 처리하려고 하는 전지전능한 객체(god object)는 내부적인 복잡도에 의해 자멸하고 만다. 여기서 충분히 협력적이라는 말이 다른 객체의 명령에 따라 행동하는 수동적인 존재를 의미하는 것은 아니다. 객체는 다른 객체의 명령에 복종하는 것이 아니라 요청에 응답할 뿐이다. 어떤 방식으로 응답할지는 객체 스스로 판단하고 결정한다. 심지어 요청에 응할지 여부도 객체 스스로 결정할 수 있다.

위 사실로부터 객체가 갖춰야 하는 두 번째 덕목을 알 수 있다.

* 객체는 충분히 "자율적"이어야 한다.

"자율적"이라는 단어의 뜻은 "자기 스스로의 원칙에 따라 어떤 일을 하거나 자기 스스로를 통제하여 절제하는 것"을 의미한다. 어떤 사물이 자신의 행동을 스스로 결정하고 책임진다면 우리는 그 사물을 자율적인 존재라고 말할 수 있다.

인간 사회는 자율적인 존재로 구성된 협력 공동체다. 사람들은 다른 사람의 요청에 따라 행동하지만 최대한 스스로의 판단에 따라 결정하고 행동한다. 캐셔는 손님이 주문하면 행동을 시작하지만 손님에게 음료를 주문하는 절차나 바리스타에게 접수 내역을 전달하는 방법은 스스로 결정한다. 손님이 캐셔에게 어떤 질문을 해야 하고 어떤 방식으로 바리스타에게 주문 내역을 전달하라고 지시하지 않는다. 캐셔는 요청에 대해 스스로 판단하고 행동하는 자율적인 존재다.

객체의 사회도 인간의 사회와 유사하다. 객체 공동체에 속한 객체들은 공동의 목표를 달성하기 위해 협력에 참여하지만 스스로의 결정과 판단에 따라 행동하는 자율적인 존재다. 객체지향 설계의 묘미는 다른 객체와 조화롭게 협력할 수 있을 만큼 충분히 개방적인 동시에 협력에 참여하는 방법을 스스로 결정할 수 있을 만큼 충분히 자율적인 객체들의 공동체를 설계하는 데 있다.

### 상태와 행동을 함께 지닌 자율적인 객체

흔히 객체를 상태(state)와 행동(beahvior)을 함께 지닌 실체라고 정의한다. 이 말은 객체가 협력에 참여하기 위해 어떤 행동을 해야 한다면 그 행동을 하는 데 필요한 상태도 함께 지니고 있어야 한다는 것을 의미한다. 커피를 제조하는 바리스타가 제조 방법을 모른다는 것이 말이 되지 않는 것처럼 객체가 어떤 행동을 하기 위해 필요한 상태를 알지 못한다는 것 역시 말이 되지 않는다. 객체가 협력에 참여하는 과정 속에서 스스로 판단하고 스스로 결정하는 자율적인 존재로 남기 위해서는 필요한 행동과 상태를 함께 지니고 있어야 한다.

객체의 자율성은 객체의 내부와 외부를 명확하게 구분하는 것으로부터 나온다. 객체의 사적인 부분은 객체 스스로 관리하고 외부에서 일체 간섭할 수 없도록 차단해야 하며, 객체의 외부에서는 접근이 허락된 수단을 통해서만 객체와 의사소통해야 한다.
다른 객체가 '무엇(what)을 수행하는지는 알 수 있지만 '어떻게(how)' 수행하는지에 대해서는 알 수 가 없다.

커피를 주문하는 협력 과정에 참여한 손님과 캐셔, 바리스타는 외부의 간섭을 받지 않고 스스로 생각하고 스스로 판단하는 자율적인 존재였다. 객체의 관점에서 자율성이란 자신의 상태를 직접 관리하고 상태를 기반으로 스스로 판단하고 행동할 수 있음을 의미한다. 객체는 행동을 위해 필요한 상태를 포함하는 동시에(바리스타는 커피 제조 방법을 기억하고 있다) 특정한 행동을 수행하는 방법을 스스로 결정할 수 있어야 한다(바리스타는 자신이 알고 있는 방법에 따라 커피를 제조한다). 따라서 객체는 상태와 행위를 하나의 단위로 묶는 자율적인 존재다.

과거의 전통적인 개발 방법은 데이터와 프로세스를 엄격하게 구분한다. 이에 반해 객체지향에서는 데이터와 프로세스를 객체라는 하나의 틀 안에 함께 묶어 놓음으로써 객체의 자율성을 보장한다. 이것이 전통적인 개발 방법과 객체지향을 구분 짓는 가장 핵심적인 차이다. 자율적인 객체로 구성된 공동체는 유지보수가 쉽고 재사용이 용이한 시스템을 구축할 수 있는 가능성을 제시한다.


### 협력과 메시지

커피를 주문하기 위해 협력하는 사람들은 자신의 책임을 다하기 위해 다른 사람들에게 도움을 요청한다. 손님은 캐셔에게 주문된 커피를 요청하고, 캐셔는 바리스타에게 커피를 제조해줄 것을 요청한다. 인간들은 타인에게 도움을 요청하기 위해 다양한 방법을 활용한다. 가장 원초적인 의사소통 수단인 말부터 캐셔가 바리스타에게 도움을 요청하기 위해 컵 옆면에 적어 놓은 글자까지, 사람들은 원활한 협력을 가능케 하는 다양한 수단을 통해 의사소통할 수 있다.

여러가지 수단을 이용해 요청하고 응답할 수 있는 사람들과는 달리 객체들은 오직 한 가지 의사소통 수단만이 존재한다.  
이를 **메시지**라고 한다. 한 객체가 다른 객체에게 요청하는 것을 메시지를 전송한다고 말하고 다른 객체로부터 요청을 받는 것을 메시지를 수신한다고 말한다.

결과적으로 객체는 협력을 위해 다른 객체에게 메시지를 전송하고 다른 객체로부터 메시지를 수신한다. 따라서 객체지향의 세게에서 협력은 메시지를 전송하는 객체와 메시지를 수신하는 객체 사이의 관계로 구성된다. 이때 메시지를 전송하는 객체를 **송신자(sender)**라고 부르고 메시지를 수신하는 객체를 **수신자(receiver)**라고 부른다.

### 메서드와 자율성

객체는 다른 객체와 협력하기 위해 메시지를 전송한다. 수신자는 먼저 수신된 메시지를 이해할 수 있는지 여부를 판단한 후 미리 정해진 자신만의 방법에 따라 메시지를 처리한다. 이처럼 객체가 수신된 메시지를 처리하는 방법을 **메서드(method)**라고 부른다.

객체지향 프로그래밍 언어에서 메서드는 클래스 안에 포함된 함수 또는 프로시저를 통해 구현된다. 따라서 어떤 객체에게 메시지를 전송하면 결과적으로 메시지에 대응되는 특정 메서드가 실행된다. 메시지를 수신한 객체가 실행 시간에 메서드를 선택할 수 있다는 점은 다른 프로그래밍 언어와 객체지향 프로그래밍 언어를 구분 짓는 핵심적인 특징 중 하나다. 이것은 프로시저 호출에 대한 실행 코드를 컴파일 시간에 결정하는 절차적인 언어와 확연히 구분되는 특징이다.

메시지와 메서드의 분리는 객체의 협력에 참여하는 객체들 간의 자율성을 증진시킨다. 커피를 주문하는 협력 과정에서 커피 제조를 요청받은 바리스타는 커피 머신을 이용해 커피를 제조할 수도 있지만 커피머신을 사용하지 않고 수작업만으로 커피를 제조할 수도 있다. 객체지향의 개념에 비유하면 바리스타로 전달된 커피 제조 요청이 메시지이고 커피를 제조하는 구체적인 방법이 메서드다. 커피 제조를 요청한 캐셔는 커피가 제조될 것이라고 기대하지만 커피를 제조하는 구체적인 방법에 관해서는 관여하지 않는다. 따라서 바리스타는 커피 제조라는 메시지에 응답하기 위해 자신만의 자율적인 방법에 따라 커피를 제조할 수 있다.

외부의 요청이 무엇인지를 표현하는 메시지와 요청을 처리하기 위한 구체적인 방법인 메서드를 분리하는 것은 객체의 자율성을 높이는 핵심 메커니즘이다. 이것은 캡슐화(encapsulation)라는 개념과도 깊이 관련돼 있다.

### 결론

마지막으로 지금까지 설명한 내용을 모두 종합해서 "객체지향이란 무엇인가"에 대해 정리하겠다. 다음은 객체지향의 개념을 간략하게 정리한 것이다. 비록 아래의 정리가 불완전하고 부정확하기는 하지만 대부분의 사람들이 중요하다고 생각하는 객체지향의 개념을 포괄하고 있다. 중요한 단어는 굵게 표기했다.

* 객체지향이란 시스템을 상호작용하는 **자율적인 객체들의 공동체**로 바라보고 객체를 이용해 시스템을 분할하는 방법이다.
* 자율적인 객체란 **상태**와 **행위**를 함께 지니며 스스로 자기 자신을 책임지는 객체를 의미한다.
* 객체는 시스템의 행위를 구현하기 위해 다른 객체와 **협력**한다. 각 객체는 협력 내에서 정해진 **역할**을 수행하며 역할은 관련된 **책임**의 집합이다.
* 객체는 다른 객체와 협력하기 위해 메시지를 전송하고, 메시지를 수신한 객체는 메시지를 처리하는 데 적합한 메서드를 자율적으로 선택한다.

* * *

## 마무리

이번 글은 객체지향의 개념을 머릿속에 명확하게 심어준 객체지향의 사실과 오해라는 책의 내용을 가져와 정리한 글입니다.  
다음 포스트에서는 객체지향 디자인의 5원칙인 SOLID(SRP, OCP, LSP, ISP, DEIP)에 대해 정리해보려 합니다.
